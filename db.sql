create database fruverhouse;
use fruverhouse;

CREATE TABLE TIENDA (
  idTIENDA INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(50) NULL,
  direccion VARCHAR(60) NULL,
  PRIMARY KEY(idTIENDA)
);

CREATE TABLE PERSONA (
  idPERSONA VARCHAR(40) NOT NULL,
  primerNombre VARCHAR(40) NULL,
  segundoNombre VARCHAR(40) NULL,
  primerApellido VARCHAR(40) NULL,
  segundoApellido VARCHAR(40) NULL,
  direccionResidencia VARCHAR(50) NULL,
  email VARCHAR(60) unique NOT NULL,
  telefono VARCHAR(15) NULL,
  contrase√±a VARCHAR(200) NOT NULL,
  PRIMARY KEY(idPERSONA)
);

CREATE TABLE PERMISO (
  idPERMISO INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  nombrePermiso VARCHAR(30) NULL,
  PRIMARY KEY(idPERMISO)
);

CREATE TABLE CATEGORIA (
  idCATEGORIA INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(50) NULL,
  imagen VARCHAR(200) NULL,
  PRIMARY KEY(idCATEGORIA)
);

CREATE TABLE ADMINISTRADOR (
  PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  PRIMARY KEY(PERSONA_idPERSONA),
  INDEX ADMINISTRADOR_FKIndex1(PERSONA_idPERSONA),
  FOREIGN KEY(PERSONA_idPERSONA)
    REFERENCES PERSONA(idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE USUARIO (
  PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  PRIMARY KEY(PERSONA_idPERSONA),
  INDEX USUARIO_FKIndex1(PERSONA_idPERSONA),
  FOREIGN KEY(PERSONA_idPERSONA)
    REFERENCES PERSONA(idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE PRODUCTO (
  idPRODUCTO INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  CATEGORIA_idCATEGORIA INTEGER UNSIGNED NOT NULL,
  nombre VARCHAR(50) NULL,
  unidad VARCHAR(19) NULL,
  precio DOUBLE NULL,
  imagen VARCHAR(200) NULL,
  PRIMARY KEY(idPRODUCTO),
  INDEX PRODUCTO_FKIndex1(CATEGORIA_idCATEGORIA),
  FOREIGN KEY(CATEGORIA_idCATEGORIA)
    REFERENCES CATEGORIA(idCATEGORIA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE DOMICILIARIO (
  PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  TIENDA_idTIENDA INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(PERSONA_idPERSONA),
  INDEX DOMICILIARIO_FKIndex1(PERSONA_idPERSONA),
  INDEX DOMICILIARIO_FKIndex2(TIENDA_idTIENDA),
  FOREIGN KEY(PERSONA_idPERSONA)
    REFERENCES PERSONA(idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(TIENDA_idTIENDA)
    REFERENCES TIENDA(idTIENDA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE ADMINISTRADOR_has_PERMISO (
  ADMINISTRADOR_PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  PERMISO_idPERMISO INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(ADMINISTRADOR_PERSONA_idPERSONA, PERMISO_idPERMISO),
  INDEX ADMINISTRADOR_has_PERMISO_FKIndex1(ADMINISTRADOR_PERSONA_idPERSONA),
  INDEX ADMINISTRADOR_has_PERMISO_FKIndex2(PERMISO_idPERMISO),
  FOREIGN KEY(ADMINISTRADOR_PERSONA_idPERSONA)
    REFERENCES ADMINISTRADOR(PERSONA_idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(PERMISO_idPERMISO)
    REFERENCES PERMISO(idPERMISO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE PEDIDO (
  codigoPedido INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  DOMICILIARIO_PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  USUARIO_PERSONA_idPERSONA VARCHAR(40) NOT NULL,
  direccionDestino VARCHAR(50) NULL,
  PRIMARY KEY(codigoPedido),
  INDEX PEDIDO_FKIndex1(USUARIO_PERSONA_idPERSONA),
  INDEX PEDIDO_FKIndex2(DOMICILIARIO_PERSONA_idPERSONA),
  FOREIGN KEY(USUARIO_PERSONA_idPERSONA)
    REFERENCES USUARIO(PERSONA_idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(DOMICILIARIO_PERSONA_idPERSONA)
    REFERENCES DOMICILIARIO(PERSONA_idPERSONA)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

CREATE TABLE PEDIDO_has_PRODUCTO (
  PEDIDO_codigoPedido INTEGER UNSIGNED NOT NULL,
  PRODUCTO_idPRODUCTO INTEGER UNSIGNED NOT NULL,
  cantidad DOUBLE NULL,
  PRIMARY KEY(PEDIDO_codigoPedido, PRODUCTO_idPRODUCTO),
  INDEX PEDIDO_has_PRODUCTO_FKIndex1(PEDIDO_codigoPedido),
  INDEX PEDIDO_has_PRODUCTO_FKIndex2(PRODUCTO_idPRODUCTO),
  FOREIGN KEY(PEDIDO_codigoPedido)
    REFERENCES PEDIDO(codigoPedido)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(PRODUCTO_idPRODUCTO)
    REFERENCES PRODUCTO(idPRODUCTO)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);


